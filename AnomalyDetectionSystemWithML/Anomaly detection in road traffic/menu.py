#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 15, 2019 07:33:04 PM +04  platform: Windows NT

import sys
import os

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from GUI.Design import menu_support


def launch_data_extract_win():
    #os.chdir(r'C:\Users\Anuj\Desktop\opencv-speed-detector\Anomaly detection in road traffic\GUI')
    os.system('dataextraction.py')
    tk.Tk().wm_state('iconic')

def launch_training_win():
    os.system('training.py')
    tk.Tk().wm_state('iconic')

def launch_prediction_win():
    os.system('prediction.py')
    tk.Tk().wm_state('iconic')

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = menu (root)
    menu_support.init(root, top)
    root.mainloop()

w = None
def create_menu(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = menu (w)
    menu_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_menu():
    global w
    w.destroy()
    w = None

class menu:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font13 = "-family {Segoe UI Semibold} -size 11 -weight bold "  \
            "-slant roman -underline 0 -overstrike 0"
        font14 = "-family Georgia -size 16 -weight bold -slant roman "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("604x453+433+150")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1, 1)
        top.title("Traffic Anomaly Detection")
        top.configure(background="#ffffff")
        top.configure(highlightcolor="#ffffff")

        self.TFrame1 = ttk.Frame(top)
        self.TFrame1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.TFrame1.configure(relief='sunken')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="sunken")

        self.Label1 = tk.Label(self.TFrame1)
        self.Label1.place(relx=0.381, rely=0.088, height=31, width=124)
        self.Label1.configure(activebackground="#c0c0c0")
        self.Label1.configure(background="#dbdbdb")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font14)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''MENU''')

        self.btnData = tk.Button(self.TFrame1,command=launch_data_extract_win)
        self.btnData.place(relx=0.331, rely=0.265, height=44, width=187)
        self.btnData.configure(activebackground="#ececec")
        self.btnData.configure(activeforeground="#000000")
        self.btnData.configure(background="#ffffff")
        self.btnData.configure(disabledforeground="#a3a3a3")
        self.btnData.configure(font=font13)
        self.btnData.configure(foreground="#000000")
        self.btnData.configure(highlightbackground="#d9d9d9")
        self.btnData.configure(highlightcolor="black")
        self.btnData.configure(pady="0")
        self.btnData.configure(text='''DATA EXTRACTION''')

        self.btnTrain = tk.Button(self.TFrame1,command=launch_training_win)
        self.btnTrain.place(relx=0.331, rely=0.486, height=44, width=187)
        self.btnTrain.configure(activebackground="#ececec")
        self.btnTrain.configure(activeforeground="#000000")
        self.btnTrain.configure(background="#ffffff")
        self.btnTrain.configure(disabledforeground="#a3a3a3")
        self.btnTrain.configure(font=font13)
        self.btnTrain.configure(foreground="#000000")
        self.btnTrain.configure(highlightbackground="#d9d9d9")
        self.btnTrain.configure(highlightcolor="black")
        self.btnTrain.configure(pady="0")
        self.btnTrain.configure(text='''TRAIN MODEL''')

        self.btnPredict = tk.Button(self.TFrame1,command=launch_prediction_win)
        self.btnPredict.place(relx=0.331, rely=0.706, height=44, width=187)
        self.btnPredict.configure(activebackground="#ececec")
        self.btnPredict.configure(activeforeground="#000000")
        self.btnPredict.configure(background="#ffffff")
        self.btnPredict.configure(disabledforeground="#a3a3a3")
        self.btnPredict.configure(font=font13)
        self.btnPredict.configure(foreground="#000000")
        self.btnPredict.configure(highlightbackground="#d9d9d9")
        self.btnPredict.configure(highlightcolor="black")
        self.btnPredict.configure(pady="0")
        self.btnPredict.configure(text='''PREDICTION''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg='#8080c0',fg=_fgcolor)
        top.configure(menu = self.menubar)

if __name__ == '__main__':
    vp_start_gui()





